// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iZettleSDK
import Foundation
import Swift
@_exported import iZettleSDK
public let iZettleSDKAuthorizationProviderErrorDomain: Foundation.NSErrorDomain
public enum iZettleSDKAuthorizationProviderError : Swift.Int {
  case callbackURLInvalid
  case callbackURLMissing
  case clientIdInvalid
  case presentationNotPossible
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class iZettleSDKAuthorization : ObjectiveC.NSObject, iZettleSDKAuthorizationProvider {
  @objc public init(clientID: Swift.String, callbackURL: Foundation.URL, enforcedUserAccount: @autoclosure @escaping () -> Swift.String? = nil) throws
  @objc deinit
  @objc override dynamic public init()
}
public let iZettleSDKOAuthTokenErrorDomain: Foundation.NSErrorDomain
public enum iZettleSDKOAuthTokenError : Swift.Int {
  case dataMissing
  case scopeMissing
  case expired
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class iZettleSDKOAuthToken : ObjectiveC.NSObject {
  @objc convenience public init(data: Foundation.Data) throws
  @objc public init(accessToken: Swift.String, expiresIn: Swift.Int, refreshToken: Swift.String?) throws
  @objc override dynamic public init()
  @objc deinit
}
public typealias iZettleAuthorizationCompletion = (iZettleSDKOAuthToken?, Swift.Error?) -> Swift.Void
@objc public protocol iZettleSDKAuthorizationProvider {
  @objc func authorizeAccount(completion: @escaping iZettleAuthorizationCompletion)
  @objc func verifyAccount(uuid: Foundation.UUID, completion: @escaping iZettleAuthorizationCompletion)
}
extension iZettleSDKOAuthTokenError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
extension iZettleSDKOAuthTokenError : Foundation.CustomNSError {
  public var errorCode: Swift.Int {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension iZettleSDKAuthorizationProviderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
extension iZettleSDKAuthorizationProviderError : Foundation.CustomNSError {
  public var errorCode: Swift.Int {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension iZettleSDKAuthorizationProviderError : Swift.Equatable {}
extension iZettleSDKAuthorizationProviderError : Swift.Hashable {}
extension iZettleSDKAuthorizationProviderError : Swift.RawRepresentable {}
extension iZettleSDKOAuthTokenError : Swift.Equatable {}
extension iZettleSDKOAuthTokenError : Swift.Hashable {}
extension iZettleSDKOAuthTokenError : Swift.RawRepresentable {}
